diff --git a/src/darwin/input_hook.c b/src/darwin/input_hook.c
index 9c4f32d..e6cd6ce 100644
--- a/src/darwin/input_hook.c
+++ b/src/darwin/input_hook.c
@@ -53,9 +53,6 @@ TISEventMessage *tis_event_message;
 // Event runloop reference.
 CFRunLoopRef event_loop;
 
-// Flag to restart the event tap incase of timeout.
-static Boolean restart_tap = false;
-
 // Modifiers for tracking key masks.
 static uint16_t current_modifiers = 0x0000;
 
@@ -102,6 +99,10 @@ static uiohook_event event;
 // Event dispatch callback.
 static dispatcher_t dispatcher = NULL;
 
+// We define the event_runloop_info as a static so that hook_event_proc can
+// re-enable the tap when it gets disabled by a timeout
+static event_runloop_info *hook = NULL;
+
 UIOHOOK_API void hook_set_dispatch_proc(dispatcher_t dispatch_proc) {
     logger(LOG_LEVEL_DEBUG, "%s [%u]: Setting new dispatch callback to %#p.\n",
             __FUNCTION__, __LINE__, dispatch_proc);
@@ -235,7 +236,7 @@ static void hook_status_proc(CFRunLoopObserverRef observer, CFRunLoopActivity ac
 
             // Fire the hook stop event.
             dispatch_event(&event);
-            
+
             // Deinitialize native input helper functions.
             unload_input_helper();
             break;
@@ -989,9 +990,10 @@ CGEventRef hook_event_proc(CGEventTapProxy tap_proxy, CGEventType type, CGEventR
                 logger(LOG_LEVEL_WARN, "%s [%u]: CGEventTap timeout!\n",
                         __FUNCTION__, __LINE__);
 
-                // We need to restart the tap!
-                restart_tap = true;
-                CFRunLoopStop(CFRunLoopGetCurrent());
+                // We need to re-enable the tap
+                if (hook->port) {
+                    CGEventTapEnable(hook->port, true);
+                }
             } else {
                 // In theory this *should* never execute.
                 logger(LOG_LEVEL_DEBUG, "%s [%u]: Unhandled Darwin event: %#X.\n",
@@ -1276,128 +1278,122 @@ UIOHOOK_API int hook_run() {
             logger(LOG_LEVEL_DEBUG, "%s [%u]: CFRunLoopGetCurrent successful.\n",
                     __FUNCTION__, __LINE__);
 
-            do {
-                // Reset the restart flag...
-                restart_tap = false;
-
-                // Initialize starting modifiers.
-                initialize_modifiers();
+            // Initialize starting modifiers.
+            initialize_modifiers();
 
-                // Try and allocate memory for event_runloop_info.
-                event_runloop_info *hook = NULL;
-                int event_runloop_status = create_event_runloop_info(&hook);
-                if (event_runloop_status != UIOHOOK_SUCCESS) {
-                    destroy_event_runloop_info(&hook);
-                    return event_runloop_status;
-                }
+            // Try and allocate memory for event_runloop_info.
+            int event_runloop_status = create_event_runloop_info(&hook);
+            if (event_runloop_status != UIOHOOK_SUCCESS) {
+                destroy_event_runloop_info(&hook);
+                return event_runloop_status;
+            }
 
 
-                tis_keycode_message = (TISKeycodeMessage *) calloc(1, sizeof(TISKeycodeMessage));
-                if (tis_keycode_message == NULL) {
-                    logger(LOG_LEVEL_ERROR, "%s [%u]: Failed to allocate memory for TIS message structure!\n",
-                                __FUNCTION__, __LINE__);
+            tis_keycode_message = (TISKeycodeMessage *) calloc(1, sizeof(TISKeycodeMessage));
+            if (tis_keycode_message == NULL) {
+                logger(LOG_LEVEL_ERROR, "%s [%u]: Failed to allocate memory for TIS message structure!\n",
+                            __FUNCTION__, __LINE__);
 
-                    return UIOHOOK_ERROR_OUT_OF_MEMORY;
-                }
+                return UIOHOOK_ERROR_OUT_OF_MEMORY;
+            }
 
-                #ifdef USE_OBJC
-                tis_event_message = (TISEventMessage *) calloc(1, sizeof(TISEventMessage));
-                if (tis_event_message == NULL) {
-                    logger(LOG_LEVEL_ERROR, "%s [%u]: Failed to allocate memory for TIS event structure!\n",
-                                __FUNCTION__, __LINE__);
+            #ifdef USE_OBJC
+            tis_event_message = (TISEventMessage *) calloc(1, sizeof(TISEventMessage));
+            if (tis_event_message == NULL) {
+                logger(LOG_LEVEL_ERROR, "%s [%u]: Failed to allocate memory for TIS event structure!\n",
+                            __FUNCTION__, __LINE__);
 
-                    return UIOHOOK_ERROR_OUT_OF_MEMORY;
+                return UIOHOOK_ERROR_OUT_OF_MEMORY;
+            }
+            #endif
+
+            // If we are not running on the main runloop, we need to setup a runloop dispatcher.
+            if (!CFEqual(event_loop, CFRunLoopGetMain())) {
+                // Dynamically load dispatch_sync_f to maintain 10.5 compatibility.
+                *(void **) (&dispatch_sync_f_f) = dlsym(RTLD_DEFAULT, "dispatch_sync_f");
+                const char *dlError = dlerror();
+                if (dlError != NULL) {
+                    logger(LOG_LEVEL_DEBUG, "%s [%u]: %s.\n",
+                            __FUNCTION__, __LINE__, dlError);
                 }
-                #endif
-
-                // If we are not running on the main runloop, we need to setup a runloop dispatcher.
-                if (!CFEqual(event_loop, CFRunLoopGetMain())) {
-                    // Dynamically load dispatch_sync_f to maintain 10.5 compatibility.
-                    *(void **) (&dispatch_sync_f_f) = dlsym(RTLD_DEFAULT, "dispatch_sync_f");
-                    const char *dlError = dlerror();
-                    if (dlError != NULL) {
-                        logger(LOG_LEVEL_DEBUG, "%s [%u]: %s.\n",
-                                __FUNCTION__, __LINE__, dlError);
-                    }
 
-                    // This load is equivalent to calling dispatch_get_main_queue().  We use
-                    // _dispatch_main_q because dispatch_get_main_queue is not exported from
-                    // libdispatch.dylib and the upstream function only dereferences the pointer.
-                    dispatch_main_queue_s = (struct dispatch_queue_s *) dlsym(RTLD_DEFAULT, "_dispatch_main_q");
-                    dlError = dlerror();
-                    if (dlError != NULL) {
-                        logger(LOG_LEVEL_DEBUG, "%s [%u]: %s.\n",
-                                __FUNCTION__, __LINE__, dlError);
-                    }
+                // This load is equivalent to calling dispatch_get_main_queue().  We use
+                // _dispatch_main_q because dispatch_get_main_queue is not exported from
+                // libdispatch.dylib and the upstream function only dereferences the pointer.
+                dispatch_main_queue_s = (struct dispatch_queue_s *) dlsym(RTLD_DEFAULT, "_dispatch_main_q");
+                dlError = dlerror();
+                if (dlError != NULL) {
+                    logger(LOG_LEVEL_DEBUG, "%s [%u]: %s.\n",
+                            __FUNCTION__, __LINE__, dlError);
+                }
 
-                    if (dispatch_sync_f_f == NULL || dispatch_main_queue_s == NULL) {
-                        logger(LOG_LEVEL_DEBUG, "%s [%u]: Failed to locate dispatch_sync_f() or dispatch_get_main_queue()!\n",
-                                __FUNCTION__, __LINE__);
-
-                        #if !defined(USE_CARBON_LEGACY) && defined(USE_APPLICATION_SERVICES)
-                        logger(LOG_LEVEL_DEBUG, "%s [%u]: Falling back to runloop signaling.\n",
-                                __FUNCTION__, __LINE__);
-
-                        // TODO The only thing that maybe needed in this struct is the .perform
-                        CFRunLoopSourceContext main_runloop_keycode_context = {
-                            .version         = 0,
-                            .info            = tis_keycode_message,
-                            .retain          = NULL,
-                            .release         = NULL,
-                            .copyDescription = NULL,
-                            .equal           = NULL,
-                            .hash            = NULL,
-                            .schedule        = NULL,
-                            .cancel          = NULL,
-                            .perform         = main_runloop_keycode_proc
-                        };
-
-                        int keycode_runloop_status = create_main_runloop_info(&main_runloop_keycode, &main_runloop_keycode_context);
-                        if (keycode_runloop_status != UIOHOOK_SUCCESS) {
-                            destroy_main_runloop_info(&main_runloop_keycode);
-                            return keycode_runloop_status;
-                        }
-                        #endif
+                if (dispatch_sync_f_f == NULL || dispatch_main_queue_s == NULL) {
+                    logger(LOG_LEVEL_DEBUG, "%s [%u]: Failed to locate dispatch_sync_f() or dispatch_get_main_queue()!\n",
+                            __FUNCTION__, __LINE__);
+
+                    #if !defined(USE_CARBON_LEGACY) && defined(USE_APPLICATION_SERVICES)
+                    logger(LOG_LEVEL_DEBUG, "%s [%u]: Falling back to runloop signaling.\n",
+                            __FUNCTION__, __LINE__);
+
+                    // TODO The only thing that maybe needed in this struct is the .perform
+                    CFRunLoopSourceContext main_runloop_keycode_context = {
+                        .version         = 0,
+                        .info            = tis_keycode_message,
+                        .retain          = NULL,
+                        .release         = NULL,
+                        .copyDescription = NULL,
+                        .equal           = NULL,
+                        .hash            = NULL,
+                        .schedule        = NULL,
+                        .cancel          = NULL,
+                        .perform         = main_runloop_keycode_proc
+                    };
+
+                    int keycode_runloop_status = create_main_runloop_info(&main_runloop_keycode, &main_runloop_keycode_context);
+                    if (keycode_runloop_status != UIOHOOK_SUCCESS) {
+                        destroy_main_runloop_info(&main_runloop_keycode);
+                        return keycode_runloop_status;
                     }
+                    #endif
                 }
+            }
 
-                #ifdef USE_OBJC
-                // Contributed by Alex <universailp@web.de>
-                // Create a garbage collector to handle Cocoa events correctly.
-                Class NSAutoreleasePool_class = (Class) objc_getClass("NSAutoreleasePool");
-                id pool = class_createInstance(NSAutoreleasePool_class, 0);
+            #ifdef USE_OBJC
+            // Contributed by Alex <universailp@web.de>
+            // Create a garbage collector to handle Cocoa events correctly.
+            Class NSAutoreleasePool_class = (Class) objc_getClass("NSAutoreleasePool");
+            id pool = class_createInstance(NSAutoreleasePool_class, 0);
 
-                id (*eventWithoutCGEvent)(id, SEL) = (id (*)(id, SEL)) objc_msgSend;
-                auto_release_pool = eventWithoutCGEvent(pool, sel_registerName("init"));
-                #endif
+            id (*eventWithoutCGEvent)(id, SEL) = (id (*)(id, SEL)) objc_msgSend;
+            auto_release_pool = eventWithoutCGEvent(pool, sel_registerName("init"));
+            #endif
 
 
-                // Start the hook thread runloop.
-                CFRunLoopRun();
+            // Start the hook thread runloop.
+            CFRunLoopRun();
 
 
-                #ifdef USE_OBJC
-                // Contributed by Alex <universailp@web.de>
-                eventWithoutCGEvent(auto_release_pool, sel_registerName("release"));
-                #endif
+            #ifdef USE_OBJC
+            // Contributed by Alex <universailp@web.de>
+            eventWithoutCGEvent(auto_release_pool, sel_registerName("release"));
+            #endif
 
-                #if !defined(USE_CARBON_LEGACY) && defined(USE_APPLICATION_SERVICES)
-                pthread_mutex_lock(&main_runloop_mutex);
-                if (!CFEqual(event_loop, CFRunLoopGetMain())) {
-                    if (dispatch_sync_f_f == NULL || dispatch_main_queue_s == NULL) {
-                        destroy_main_runloop_info(&main_runloop_keycode);
-                    }
+            #if !defined(USE_CARBON_LEGACY) && defined(USE_APPLICATION_SERVICES)
+            pthread_mutex_lock(&main_runloop_mutex);
+            if (!CFEqual(event_loop, CFRunLoopGetMain())) {
+                if (dispatch_sync_f_f == NULL || dispatch_main_queue_s == NULL) {
+                    destroy_main_runloop_info(&main_runloop_keycode);
                 }
-                pthread_mutex_unlock(&main_runloop_mutex);
-                #endif
+            }
+            pthread_mutex_unlock(&main_runloop_mutex);
+            #endif
 
-                #ifdef USE_OBJC
-                free(tis_event_message);
-                #endif
-                free(tis_keycode_message);
+            #ifdef USE_OBJC
+            free(tis_event_message);
+            #endif
+            free(tis_keycode_message);
 
-                destroy_event_runloop_info(&hook);
-            } while (restart_tap);
+            destroy_event_runloop_info(&hook);
         } else {
             logger(LOG_LEVEL_ERROR, "%s [%u]: CFRunLoopGetCurrent failure!\n",
                     __FUNCTION__, __LINE__);
@@ -1424,9 +1420,6 @@ UIOHOOK_API int hook_stop() {
     if (mode != NULL) {
         CFRelease(mode);
 
-        // Make sure the tap doesn't restart.
-        restart_tap = false;
-
         // Stop the run loop.
         CFRunLoopStop(event_loop);
 
diff --git a/src/windows/input_helper.c b/src/windows/input_helper.c
index e690021..4b7cff1 100644
--- a/src/windows/input_helper.c
+++ b/src/windows/input_helper.c
@@ -298,7 +298,7 @@ unsigned short keycode_to_scancode(DWORD vk_code, DWORD flags) {
     if (vk_code < sizeof(keycode_scancode_table) / sizeof(keycode_scancode_table[0])) {
         scancode = keycode_scancode_table[vk_code][0];
 
-        if (flags & LLKHF_EXTENDED) {
+        if (!(flags & LLKHF_EXTENDED)) {
             logger(LOG_LEVEL_DEBUG, "%s [%u]: Using extended lookup for vk_code: %li\n",
                     __FUNCTION__, __LINE__, vk_code);
 
diff --git a/src/windows/input_hook.c b/src/windows/input_hook.c
index db1e79e..264a71b 100644
--- a/src/windows/input_hook.c
+++ b/src/windows/input_hook.c
@@ -23,10 +23,20 @@
 #include "input_helper.h"
 #include "logger.h"
 
+#ifndef FOREGROUND_TIMER_MS
+#define FOREGROUND_TIMER_MS 83 // 12 fps
+#endif
+
 // Thread and hook handles.
 static DWORD hook_thread_id = 0;
 static HHOOK keyboard_event_hhook = NULL, mouse_event_hhook = NULL;
-static HWINEVENTHOOK win_event_hhook = NULL;
+static HWINEVENTHOOK win_foreground_hhook = NULL, win_minimizeend_hhook = NULL;
+static UINT_PTR foreground_timer = 0;
+
+static HWND foreground_window = NULL;
+static bool is_blocked_by_uipi = true;
+
+static UINT WM_UIOHOOK_UIPI_TEST = WM_NULL;
 
 // The handle to the DLL module pulled in DllMain on DLL_PROCESS_ATTACH.
 extern HINSTANCE hInst;
@@ -66,6 +76,7 @@ static inline void dispatch_event(uiohook_event *const event) {
     }
 }
 
+static void initialize_modifiers();
 
 // Set the native modifier mask for future events.
 static inline void set_modifier_mask(unsigned short int mask) {
@@ -79,6 +90,10 @@ static inline void unset_modifier_mask(unsigned short int mask) {
 
 // Get the current native modifier mask state.
 static inline unsigned short int get_modifiers() {
+    if (is_blocked_by_uipi) {
+        initialize_modifiers();
+        is_blocked_by_uipi = false;
+    }
     return current_modifiers;
 }
 
@@ -87,31 +102,49 @@ static void initialize_modifiers() {
     current_modifiers = 0x0000;
 
     // NOTE We are checking the high order bit, so it will be < 0 for a singed short.
-    if (GetKeyState(VK_LSHIFT)   < 0) { set_modifier_mask(MASK_SHIFT_L);     }
-    if (GetKeyState(VK_RSHIFT)   < 0) { set_modifier_mask(MASK_SHIFT_R);     }
-    if (GetKeyState(VK_LCONTROL) < 0) { set_modifier_mask(MASK_CTRL_L);      }
-    if (GetKeyState(VK_RCONTROL) < 0) { set_modifier_mask(MASK_CTRL_R);      }
-    if (GetKeyState(VK_LMENU)    < 0) { set_modifier_mask(MASK_ALT_L);       }
-    if (GetKeyState(VK_RMENU)    < 0) { set_modifier_mask(MASK_ALT_R);       }
-    if (GetKeyState(VK_LWIN)     < 0) { set_modifier_mask(MASK_META_L);      }
-    if (GetKeyState(VK_RWIN)     < 0) { set_modifier_mask(MASK_META_R);      }
-
-    if (GetKeyState(VK_LBUTTON)  < 0) { set_modifier_mask(MASK_BUTTON1);     }
-    if (GetKeyState(VK_RBUTTON)  < 0) { set_modifier_mask(MASK_BUTTON2);     }
-    if (GetKeyState(VK_MBUTTON)  < 0) { set_modifier_mask(MASK_BUTTON3);     }
-    if (GetKeyState(VK_XBUTTON1) < 0) { set_modifier_mask(MASK_BUTTON4);     }
-    if (GetKeyState(VK_XBUTTON2) < 0) { set_modifier_mask(MASK_BUTTON5);     }
-
-    if (GetKeyState(VK_NUMLOCK)  < 0) { set_modifier_mask(MASK_NUM_LOCK);    }
-    if (GetKeyState(VK_CAPITAL)  < 0) { set_modifier_mask(MASK_CAPS_LOCK);   }
-    if (GetKeyState(VK_SCROLL)   < 0) { set_modifier_mask(MASK_SCROLL_LOCK); }
+    if (GetAsyncKeyState(VK_LSHIFT)   < 0) { set_modifier_mask(MASK_SHIFT_L);     }
+    if (GetAsyncKeyState(VK_RSHIFT)   < 0) { set_modifier_mask(MASK_SHIFT_R);     }
+    if (GetAsyncKeyState(VK_LCONTROL) < 0) { set_modifier_mask(MASK_CTRL_L);      }
+    if (GetAsyncKeyState(VK_RCONTROL) < 0) { set_modifier_mask(MASK_CTRL_R);      }
+    if (GetAsyncKeyState(VK_LMENU)    < 0) { set_modifier_mask(MASK_ALT_L);       }
+    if (GetAsyncKeyState(VK_RMENU)    < 0) { set_modifier_mask(MASK_ALT_R);       }
+    if (GetAsyncKeyState(VK_LWIN)     < 0) { set_modifier_mask(MASK_META_L);      }
+    if (GetAsyncKeyState(VK_RWIN)     < 0) { set_modifier_mask(MASK_META_R);      }
+
+    if (GetAsyncKeyState(VK_LBUTTON)  < 0) { set_modifier_mask(MASK_BUTTON1);     }
+    if (GetAsyncKeyState(VK_RBUTTON)  < 0) { set_modifier_mask(MASK_BUTTON2);     }
+    if (GetAsyncKeyState(VK_MBUTTON)  < 0) { set_modifier_mask(MASK_BUTTON3);     }
+    if (GetAsyncKeyState(VK_XBUTTON1) < 0) { set_modifier_mask(MASK_BUTTON4);     }
+    if (GetAsyncKeyState(VK_XBUTTON2) < 0) { set_modifier_mask(MASK_BUTTON5);     }
+
+    if (GetAsyncKeyState(VK_NUMLOCK)  < 0) { set_modifier_mask(MASK_NUM_LOCK);    }
+    if (GetAsyncKeyState(VK_CAPITAL)  < 0) { set_modifier_mask(MASK_CAPS_LOCK);   }
+    if (GetAsyncKeyState(VK_SCROLL)   < 0) { set_modifier_mask(MASK_SCROLL_LOCK); }
+}
+
+void check_and_update_uipi_state(HWND hwnd) {
+    SetLastError(ERROR_SUCCESS);
+    PostMessage(hwnd, WM_UIOHOOK_UIPI_TEST, 0, 0);
+    if (GetLastError() == ERROR_ACCESS_DENIED) {
+        is_blocked_by_uipi = true;
+    }
 }
 
 void unregister_running_hooks() {
     // Stop the event hook and any timer still running.
-    if (win_event_hhook != NULL) {
-        UnhookWinEvent(win_event_hhook);
-        win_event_hhook = NULL;
+    if (win_foreground_hhook != NULL) {
+        UnhookWinEvent(win_foreground_hhook);
+        win_foreground_hhook = NULL;
+    }
+
+    if (win_minimizeend_hhook != NULL) {
+        UnhookWinEvent(win_minimizeend_hhook);
+        win_minimizeend_hhook = NULL;
+    }
+
+    if (foreground_timer != 0) {
+        KillTimer(NULL, foreground_timer);
+        foreground_timer = 0;
     }
 
     // Destroy the native hooks.
@@ -193,31 +226,14 @@ static void process_key_pressed(KBDLLHOOKSTRUCT *kbhook) {
     // Populate key pressed event.
     dispatch_event(&event);
 
+    if ((event.mask & (MASK_CTRL)) &&
+        (event.mask & (MASK_ALT)) &&
+        (event.data.keyboard.keycode == VC_DELETE)) {
+        current_modifiers = 0;
+    }
+
     // If the pressed event was not consumed...
     if (event.reserved ^ 0x01) {
-        // Buffer for unicode typed chars. No more than 2 needed.
-        WCHAR buffer[2]; // = { WCH_NONE };
-
-        // If the pressed event was not consumed and a unicode char exists...
-        SIZE_T count = keycode_to_unicode(kbhook->vkCode, buffer, sizeof(buffer));
-        for (unsigned int i = 0; i < count; i++) {
-            // Populate key typed event.
-            event.time = kbhook->time;
-            event.reserved = 0x00;
-
-            event.type = EVENT_KEY_TYPED;
-            event.mask = get_modifiers();
-
-            event.data.keyboard.keycode = VC_UNDEFINED;
-            event.data.keyboard.rawcode = (uint16_t) kbhook->vkCode;
-            event.data.keyboard.keychar = buffer[i];
-
-            logger(LOG_LEVEL_DEBUG, "%s [%u]: Key %#X typed. (%lc)\n",
-                    __FUNCTION__, __LINE__, event.data.keyboard.keycode, (wint_t) event.data.keyboard.keychar);
-
-            // Fire key typed event.
-            dispatch_event(&event);
-        }
     }
 }
 
@@ -594,40 +610,17 @@ LRESULT CALLBACK mouse_hook_event_proc(int nCode, WPARAM wParam, LPARAM lParam)
 
 // Callback function that handles events.
 void CALLBACK win_hook_event_proc(HWINEVENTHOOK hook, DWORD event, HWND hWnd, LONG idObject, LONG idChild, DWORD dwEventThread, DWORD dwmsEventTime) {
-    switch (event) {
-        case EVENT_OBJECT_NAMECHANGE:
-            logger(LOG_LEVEL_DEBUG, "%s [%u]: Restarting Windows input hook on window event: %#X.\n",
-                    __FUNCTION__, __LINE__, event);
-
-            // Remove any keyboard or mouse hooks that are still running.
-            if (keyboard_event_hhook != NULL) {
-                UnhookWindowsHookEx(keyboard_event_hhook);
-            }
-
-            if (mouse_event_hhook != NULL) {
-                UnhookWindowsHookEx(mouse_event_hhook);
-            }
-
-            // Restart the event hooks.
-            keyboard_event_hhook = SetWindowsHookEx(WH_KEYBOARD_LL, keyboard_hook_event_proc, hInst, 0);
-            mouse_event_hhook = SetWindowsHookEx(WH_MOUSE_LL, mouse_hook_event_proc, hInst, 0);
-
-            // Re-initialize modifier masks.
-            initialize_modifiers();
-
-            // FIXME We should compare the modifier mask before and after the restart
-            // to determine if we should synthesize missing events.
+    foreground_window = hWnd;
+    check_and_update_uipi_state(hWnd);
+}
 
-            // Check for event hook error.
-            if (keyboard_event_hhook == NULL || mouse_event_hhook == NULL) {
-                logger(LOG_LEVEL_ERROR, "%s [%u]: SetWindowsHookEx() failed! (%#lX)\n",
-                        __FUNCTION__, __LINE__, (unsigned long) GetLastError());
-            }
-            break;
+static VOID CALLBACK foreground_timer_proc(HWND _hwnd, UINT msg, UINT_PTR timerId, DWORD dwmsEventTime)
+{
+    HWND system_foreground = GetForegroundWindow();
 
-        default:
-            logger(LOG_LEVEL_DEBUG, "%s [%u]: Unhandled Windows window event: %#X.\n",
-                    __FUNCTION__, __LINE__, event);
+    if (foreground_window != system_foreground) {
+        foreground_window = system_foreground;
+        check_and_update_uipi_state(system_foreground);
     }
 }
 
@@ -660,17 +653,22 @@ UIOHOOK_API int hook_run() {
     keyboard_event_hhook = SetWindowsHookEx(WH_KEYBOARD_LL, keyboard_hook_event_proc, hInst, 0);
     mouse_event_hhook = SetWindowsHookEx(WH_MOUSE_LL, mouse_hook_event_proc, hInst, 0);
 
-    // Create a window event hook to listen for capture change.
-    win_event_hhook = SetWinEventHook(
-            EVENT_OBJECT_NAMECHANGE, EVENT_OBJECT_NAMECHANGE,
-            NULL,
-            win_hook_event_proc,
-            0, 0,
-            WINEVENT_OUTOFCONTEXT | WINEVENT_SKIPOWNPROCESS);
+    win_foreground_hhook = SetWinEventHook(
+            EVENT_SYSTEM_FOREGROUND, EVENT_SYSTEM_FOREGROUND,
+            NULL, win_hook_event_proc, 0, 0, WINEVENT_OUTOFCONTEXT);
+    win_minimizeend_hhook = SetWinEventHook(
+            EVENT_SYSTEM_MINIMIZEEND, EVENT_SYSTEM_MINIMIZEEND,
+            NULL, win_hook_event_proc, 0, 0, WINEVENT_OUTOFCONTEXT);
+    foreground_timer = SetTimer(NULL, 0, FOREGROUND_TIMER_MS, foreground_timer_proc);
+
+    WM_UIOHOOK_UIPI_TEST = RegisterWindowMessage("UIOHOOK_UIPI_TEST");
+
+    foreground_window = GetForegroundWindow();
+    is_blocked_by_uipi = true; // init modifiers
 
     // If we did not encounter a problem, start processing events.
     if (keyboard_event_hhook != NULL && mouse_event_hhook != NULL) {
-        if (win_event_hhook == NULL) {
+        if (win_foreground_hhook == NULL || win_minimizeend_hhook == NULL) {
             logger(LOG_LEVEL_WARN, "%s [%u]: SetWinEventHook() failed!\n",
                     __FUNCTION__, __LINE__);
         }
@@ -678,9 +676,6 @@ UIOHOOK_API int hook_run() {
         logger(LOG_LEVEL_DEBUG, "%s [%u]: SetWindowsHookEx() successful.\n",
                 __FUNCTION__, __LINE__);
 
-        // Check and setup modifiers.
-        initialize_modifiers();
-
         // Set the exit status.
         status = UIOHOOK_SUCCESS;
 
diff --git a/src/x11/input_hook.c b/src/x11/input_hook.c
index 15c9b9e..dc2f7b9 100644
--- a/src/x11/input_hook.c
+++ b/src/x11/input_hook.c
@@ -26,8 +26,11 @@
 #include <stdint.h>
 #include <uiohook.h>
 
+#ifdef USE_XKB_COMMON
 #include <xcb/xkb.h>
+#else
 #include <X11/XKBlib.h>
+#endif
 
 #include <X11/keysym.h>
 #include <X11/Xlibint.h>
